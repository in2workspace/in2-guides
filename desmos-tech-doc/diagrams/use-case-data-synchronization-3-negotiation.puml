@startuml
'https://plantuml.com/sequence-diagram

autonumber
skinparam BoxPadding 10

' -------------------- Headers -------------------- '

actor "Operator" as operator

box "Local Access Node" #LightBlue
    participant "P2PDataSyncJob" as p2p_dsj
    participant "DataNegotiationJob" as dnj
    participant "DataTransferJob" as dtj
    boundary "Context Broker" as context_broker
end box

boundary "External Access Node" as external_access_node

' -------------------- Diagram -------------------- '

note over operator, external_access_node
    Negotiation
end note

p2p_dsj -> dnj++: negotiateDataSync()
    activate dnj
    dnj -> context_broker++: GET /ngsi-ld/v1/entities/type=<type>&attrs=version,lastUpdate
        note right of context_broker
          [
            { "id": "urn:ngsi-ld:ProductOffering:<uuid>"
              "type": "<type>",
              "version": <version>",
              "lastUpdate": <lastUpdate>},
            { "id": "urn:ngsi-ld:ProductOffering:<uuid>"
            ... },
            ...
          ]
        end note
    return 200 OK Payload: local_minimum_viable_entities_for_data_negotiation_list

    loop forEach configured Access Node
        dnj -> external_access_node++: POST /sync/p2p/discovery
            note right of external_access_node
                This process is defined in the
                data_sync_discovery diagram.

                This process creates a sync job
                between the external and local
                as well as the local and external.
            end note
        return 202 Accepted Payload: external_minimum_viable_entities_for_data_negotiation_list
    end

    dnj -> dnj: checkWhichExternalDataIsMissing()
    dnj -> dnj: checkVersionsAndTimestampsFromEntityIdMatched()
    dnj -> dnj: createDataNegotiationResult()
    note right of dnj
        DataNegotiationResult:
        {
            List<NewEntitiesToSync>,
            List<ExistingEntitiesToSync>,
            ExternalIssuer
        }

        NewEntitiesToSync is a list of EntityIds of the
        entities that are not present in the local database
    end note

    dnj -> dtj++: syncData(DataNegotiationResult)
    return
return
note over operator, external_access_node
    Transfer
end note

@enduml
